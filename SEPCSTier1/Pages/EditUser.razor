@page "/EditUser/{id:long}"
@using SEPCSTier1.Data
@using SEPCSTier1.Models
@inject IUserData UserData
@inject NavigationManager NavigationManager
@attribute [Authorize (Policy ="SecurityLevel4")]
<h3>Edit user with id: @id</h3>

@if (userToEdit == null)
{
    <em>User not found!</em>
}
else
{
    <EditForm Model="@userToEdit" OnValidSubmit="@Save">
        <DataAnnotationsValidator/> <ValidationSummary/>
        <div class="form-group"> Username:<br/> <InputText rows="4" @bind-Value="userToEdit.username"/> </div>
        <div class="form-group"> Password:<br/> <InputText rows="4" @bind-Value="userToEdit.password"/> </div>
        <div class="form-group"> SecurityLevel:<br/> <InputNumber @bind-Value="userToEdit.SecurityLevel"/> </div>
        

        <p class="actions">
            <button class="btn btn-outline-dark" type="submit">Save</button>
        </p>
    </EditForm>
}

@code {

    [Parameter]
    public long id { get; set; }

 

    private User userToEdit;

    protected override async Task OnInitializedAsync()
    {
        userToEdit = await UserData.GetUserByID(id);
       
    }

    private async void Save()
    {
        await UserData.UpdateUser(userToEdit, id);
        NavigationManager.NavigateTo("/Admin",true);
    }








}