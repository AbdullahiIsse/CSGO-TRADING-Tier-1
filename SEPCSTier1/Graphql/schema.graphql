schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  users(where: UserFilterInput order: [UserSortInput!]): [User]
  items(where: ItemsFilterInput order: [ItemsSortInput!]): [Items]
  order(where: OrderFilterInput order: [OrderSortInput!]): [Order]
  chat(where: ChatFilterInput order: [ChatSortInput!]): [Chat]
  chatById(id: Long!): Chat
  orderById(id: Long!): Order
  itemById(id: Long!): Items
  userById(id: Long!): User
  userBySaleOfferId(id: Long!): User
  validateUser(username: String password: String): User
  offers(where: SaleOfferFilterInput order: [SaleOfferSortInput!]): [SaleOffer]
  offerByUserId(id: Long!): [SaleOffer]
  offerBySaleOfferId(id: Long!): SaleOffer
  cartCountById(id: Long!): Long!
  shoppingCartById(id: Long!): [ShowShoppingCart]
  totalPriceById(id: Long!): Long!
  paymentByUserId(id: Long!): CreditCard
  sumOfPriceById(id: Long!): Long!
  paymentByName(name: String): CreditCard
  allSoldOffer: [SoldOffer]
  orderBySaleId(id: Long!): Order
  getSoldOfferById(id: Long!): SoldOffer
  getOrderByWalletBuyerId(id: Long!): [Order]
  getSoldOfferByOrderId(id: Long!): SoldOffer
  getSoldOfferBySellerWalletId(id: Long!): [SoldOffer]
}

type Mutation {
  addUser(username: String! password: String!): User
  addShoppingCart(saleOfferId: Long! userId: Long!): ShopppingCart
  deleteUser(id: Long!): Long!
  addPayment(name: String cardnumber: String expirationdate: String securitycode: String): CreditCard
  addWallet(balance: Int! user_id: Long!): Wallet
  addOrder(buyerId: Long! sale_Id: Long!): Order
  addSoldOffer(item_id: Long! order_id: Long! sale_price: Int! seller_wallet_id: Long!): SoldOffer
  updatePrice(balance: Int! id: Long!): Wallet
  addSaleOffer(item_id: Long! sale_price: Int! wallet_id: Long!): SaleOffer
  deleteShoppingCart(user_id: Long! sale_offer_id: Long!): Long!
  deleteSaleOffer(id: Long!): Long!
  updatePayment(name: String cardnumber: String expirationdate: String securitycode: String id: Long!): CreditCard
  updateUser(username: String password: String securitylevel: Long! id: Long!): User
  updateSaleOfferToFalse(id: Long!): Long!
}

type Subscription {
  onUserCreate: User
}

input UserFilterInput {
  and: [UserFilterInput!]
  or: [UserFilterInput!]
  id: ComparableInt64OperationFilterInput
  username: StringOperationFilterInput
  password: StringOperationFilterInput
  securitylevel: ComparableInt64OperationFilterInput
}

input UserSortInput {
  id: SortEnumType
  username: SortEnumType
  password: SortEnumType
  securitylevel: SortEnumType
}

input ItemsFilterInput {
  and: [ItemsFilterInput!]
  or: [ItemsFilterInput!]
  id: ComparableInt64OperationFilterInput
  weaponname: StringOperationFilterInput
  weaponURL: StringOperationFilterInput
}

input ItemsSortInput {
  id: SortEnumType
  weaponname: SortEnumType
  weaponURL: SortEnumType
}

input OrderFilterInput {
  and: [OrderFilterInput!]
  or: [OrderFilterInput!]
  id: ComparableInt64OperationFilterInput
  wallet_buyer_id: ComparableInt64OperationFilterInput
  sale_id: ComparableInt64OperationFilterInput
}

input OrderSortInput {
  id: SortEnumType
  wallet_buyer_id: SortEnumType
  sale_id: SortEnumType
}

input ChatFilterInput {
  and: [ChatFilterInput!]
  or: [ChatFilterInput!]
  user_id: ComparableInt64OperationFilterInput
  chatlist: StringOperationFilterInput
}

input ChatSortInput {
  user_id: SortEnumType
  chatlist: SortEnumType
}

input SaleOfferFilterInput {
  and: [SaleOfferFilterInput!]
  or: [SaleOfferFilterInput!]
  id: ComparableInt64OperationFilterInput
  item_id: ComparableInt64OperationFilterInput
  sale_price: ComparableInt32OperationFilterInput
  wallet_id: ComparableInt64OperationFilterInput
  available: BooleanOperationFilterInput
}

input SaleOfferSortInput {
  id: SortEnumType
  item_id: SortEnumType
  sale_price: SortEnumType
  wallet_id: SortEnumType
  available: SortEnumType
}

input ComparableInt64OperationFilterInput {
  eq: Long
  neq: Long
  in: [Long!]
  nin: [Long!]
  gt: Long
  ngt: Long
  gte: Long
  ngte: Long
  lt: Long
  nlt: Long
  lte: Long
  nlte: Long
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

enum SortEnumType {
  ASC
  DESC
}

input ComparableInt32OperationFilterInput {
  eq: Int
  neq: Int
  in: [Int!]
  nin: [Int!]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

type Order {
  id: Long!
  wallet_buyer_id: Long!
  sale_id: Long!
}

type Items {
  id: Long!
  weaponname: String
  weaponURL: String
}

type User {
  id: Long!
  username: String!
  password: String!
  securitylevel: Long!
}

type Chat {
  user_id: Long!
  chatlist: String
}

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long

type SaleOffer {
  id: Long!
  item_id: Long!
  sale_price: Int!
  wallet_id: Long!
  available: Boolean!
}

type ShowShoppingCart {
  sale_offer_id: Long!
  item_id: Long!
  weaponname: String
  sale_price: Long!
}

type CreditCard {
  id: Long!
  name: String
  cardnumber: String
  expirationdate: String
  securitycode: String
}

type SoldOffer {
  id: Long!
  item_id: Long!
  order_id: Long!
  sale_price: Int!
  seller_wallet_id: Long!
}

type ShopppingCart {
  saleOfferId: Long!
  userId: Long!
}

type Wallet {
  id: Long!
  balance: Int!
  creditcard_id: Long!
  user_id: Long!
}