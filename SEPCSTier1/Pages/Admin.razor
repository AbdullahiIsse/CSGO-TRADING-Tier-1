@page "/Admin"
@using SEPCSTier1.Models
@using SEPCSTier1.Data
@inject IUserData UserData
@inject NavigationManager NavigationManager
@attribute [Authorize (Policy ="SecurityLevel4")]

<h1>User Accounts</h1>


@if (usersAccountsToShow == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!usersAccountsToShow.Any())
{
    <p>
        <em>No user exist. Please add some.</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>User ID</th>
            <th>Username</th>
            <th>Password</th>
            <th>SecurityLevel</th>
        </tr>
        </thead>

        <tbody class="text-gray-700">

        @foreach (var item in usersAccountsToShow)
        {
            <tr>
                <td class="w-1/3 text-left py-3 px-4">@item.id</td>
                <td class="w-1/3 text-left py-3 px-4">@item.username</td>
                <td class="w-1/3 text-left py-3 px-4">@item.password</td>
                <td class="w-1/3 text-left py-3 px-4">@item.SecurityLevel</td>
                <td>
                    <button @onclick="@(() => RemoveUserAccount(item.id))">
                        <i class="oi oi-trash" style="color:red"/>
                    </button>
                </td>

                <td>

                    <button @onclick="@(() => EditUser(item.id))">
                        <i class="oi oi-pencil" style="color:#1b6ec2"/>
                    </button>

                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {

    private IList<User> usersAccountsToShow;
    private IList<User> allUserAccounts;

    protected override async Task OnInitializedAsync()
    {
        allUserAccounts = await UserData.GetUsers();
        usersAccountsToShow = allUserAccounts;
    }

    private User newUserAccount = new User();


    private void AddnewUserAccount()
    {
        UserData.AddUser(newUserAccount);
        NavigationManager.NavigateTo("/Admin", true);
    }

    private void RemoveUserAccount(long UserId)
    {
        User accountToRemove = allUserAccounts.First(t => t.id == UserId);
        UserData.RemoveAccount(UserId);
        allUserAccounts.Remove(accountToRemove);
        usersAccountsToShow.Remove(accountToRemove);
    }


    private void EditUser(long id)
    {
        NavigationManager.NavigateTo($"EditUser/{id}");
    }

}