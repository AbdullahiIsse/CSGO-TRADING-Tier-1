@page "/Admin"
@using SEPCSTier1.Models
@using SEPCSTier1.Data
@inject IUserData UserData
@inject NavigationManager NavigationManager 

<h1>User Accounts</h1>

@if (usersAccountsToShow == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!usersAccountsToShow.Any())
{
    <p>
        <em>No ToDo items exist. Please add some.</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>User ID</th>
            <th>Username</th>
            <th>Password</th>
        </tr>
        </thead>
       
            <tbody class="text-gray-700">

            @foreach (var item in usersAccountsToShow)
            {
                <tr>
                    <td class="w-1/3 text-left py-3 px-4">@item.id</td>
                    <td class="w-1/3 text-left py-3 px-4">@item.username</td>
                    <td class="w-1/3 text-left py-3 px-4">@item.password</td>
                    <td>
                        <button @onclick="@(() => RemoveUserAccount(item.id))">
                            <i class="oi oi-trash" style="color:red"/>
                        </button>
                    </td>
                </tr>
            }
       </tbody>
           </table>
       }

<h1>Add User Accounts</h1>

<EditForm Model="@newUserAccount" OnValidSubmit="@AddnewUserAccount">
    <DataAnnotationsValidator/> <ValidationSummary/>
    <div class="form-group"> Username:<br/> <InputText @bind-Value="newUserAccount.username"/> </div>
    <div class="form-group"> Password:<br/> <InputText  @bind-Value="newUserAccount.password"/> </div>
    <p class="actions">
        <button class="btn btn-outline-dark" type="submit">Create</button>
    </p>
</EditForm>

@code {

    private IList<User> usersAccountsToShow;
    private IList<User> allUserAccounts;

    protected override async Task OnInitializedAsync()
    {
        allUserAccounts = await UserData.GetUsers();
        usersAccountsToShow = allUserAccounts;
    }
    
    private User newUserAccount = new User();

    private  void AddnewUserAccount()
    {
        UserData.AddUser(newUserAccount);
        NavigationManager.NavigateTo("/Admin");
    }
    
    private void RemoveUserAccount(int UserId)
    {
        User accountToRemove = allUserAccounts.First(t => t.id == UserId);
        UserData.RemoveAccount(UserId);
        allUserAccounts.Remove(accountToRemove);
        usersAccountsToShow.Remove(accountToRemove);
    }
    

}