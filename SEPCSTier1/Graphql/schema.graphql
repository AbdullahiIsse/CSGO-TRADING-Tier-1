schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  users(where: UserFilterInput order: [UserSortInput!]): [User]
  items(where: ItemsFilterInput order: [ItemsSortInput!]): [Items]
  itemById(id: Long!): Items
  userById(id: Long!): User
  validateUser(username: String password: String): User
  offers(where: SaleOfferFilterInput order: [SaleOfferSortInput!]): [SaleOffer]
}

type Mutation {
  addUser(username: String password: String): User
  deleteUser(id: Long!): Long!
  addPayment(name: String cardnumber: String expirationdate: String securitycode: String): Payment
}

type Subscription {
  onUserCreate: User
}

input UserFilterInput {
  and: [UserFilterInput!]
  or: [UserFilterInput!]
  id: ComparableInt64OperationFilterInput
  username: StringOperationFilterInput
  password: StringOperationFilterInput
}

input UserSortInput {
  id: SortEnumType
  username: SortEnumType
  password: SortEnumType
}

input ItemsFilterInput {
  and: [ItemsFilterInput!]
  or: [ItemsFilterInput!]
  id: ComparableInt32OperationFilterInput
  weaponname: StringOperationFilterInput
  weaponURL: StringOperationFilterInput
}

input ItemsSortInput {
  id: SortEnumType
  weaponname: SortEnumType
  weaponURL: SortEnumType
}

input SaleOfferFilterInput {
  and: [SaleOfferFilterInput!]
  or: [SaleOfferFilterInput!]
  id: ComparableInt32OperationFilterInput
  item_id: StringOperationFilterInput
  wallet_id: StringOperationFilterInput
}

input SaleOfferSortInput {
  id: SortEnumType
  item_id: SortEnumType
  wallet_id: SortEnumType
}

input ComparableInt64OperationFilterInput {
  eq: Long
  neq: Long
  in: [Long!]
  nin: [Long!]
  gt: Long
  ngt: Long
  gte: Long
  ngte: Long
  lt: Long
  nlt: Long
  lte: Long
  nlte: Long
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

enum SortEnumType {
  ASC
  DESC
}

input ComparableInt32OperationFilterInput {
  eq: Int
  neq: Int
  in: [Int!]
  nin: [Int!]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long

type Items {
  id: Int!
  weaponname: String
  weaponURL: String
}

type User {
  id: Long!
  username: String
  password: String
}

type SaleOffer {
  id: Int!
  item_id: String
  wallet_id: String
}

type Payment {
  id: Int!
  name: String
  cardnumber: String
  expirationdate: String
  securitycode: String
}