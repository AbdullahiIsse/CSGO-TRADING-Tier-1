@page "/SignUp"
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.SignalR
@using SEPCSTier1.Data
@using SEPCSTier1.Models
@inject IUserData UserData
@inject IPaymentData PaymentData
@inject NavigationManager NavigationManager
@inject ProtectedSessionStorage ProtectedSessionStore
@inject AuthenticationStateProvider AuthenticationStateProvider
<h3>SignUp</h3>


<div class="container rounded bg-white mt-5 mb-5">
    <div class="row">
        <div class="col-md-3 border-right">
            <div class="d-flex flex-column align-items-center text-center p-3 py-5">
                <img class="rounded-circle mt-5" width="150px" src="https://st3.depositphotos.com/15648834/17930/v/600/depositphotos_179308454-stock-illustration-unknown-person-silhouette-glasses-profile.jpg"><span class="font-weight-bold">Welcome</span><span class="text-black-50">To CSGO Trading</span><span> </span>
            </div>
        </div>
        <div class="col-md-5 border-right">
            <div class="p-3 py-5">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h4 class="text-right">Profile Settings</h4>
                </div>
                
                    <div class="row mt-2">
                        <h3>Create UserAccount</h3>
                        <div class="col-md-12">
                            <label class="labels">Username</label><input type="text" class="form-control" placeholder="Username" @bind-value="newUserAccount.username">
                        </div>
                        <div class="col-md-12">
                            <label class="labels">Password</label><input type="password" class="form-control" placeholder="Password" @bind-value="newUserAccount.password">
                        </div>
                    </div>
                   
                    <div class="row mt-3">
                    </div>
                    
                   
               
                
                <div class="container-md">
                    <div class="row">
                
                        
                            <div class="col">
                
                                <h1> Payment Information</h1>
                                <div class="form-group">
                                    <label for="inputAddress">Name</label>
                                    <input class="form-control" id="Name" placeholder="Name" @bind="newPaymentAccount.name"/>
                                </div>
                
                                <div class="form-group">
                                    <label for="inputAddress">CardNumber</label>
                                    <input class="form-control" id="CardNumber" placeholder="**** **** **** ****" @bind="newPaymentAccount.cardnumber"/>
                                </div>
                
                                
                                    <div class="row">
                                        <div class="col">
                                            <label for="inputAddress">Expiration Date</label>
                                            <input class="form-control" placeholder="**/**" @bind="newPaymentAccount.expirationdate"/>
                                        </div>
                                        <div class="col">
                                            <label for="inputAddress">Security Code</label>
                                            <input class="form-control" placeholder="***" @bind="newPaymentAccount.securitycode"/>
                                        </div>
                
                                    </div>
                                    <button type="submit" @onclick="@(() => { AddUserAccount(); AddnewPaymentAccount();  })" class="btn btn-primary">Create Account & Payment</button>
                                
                            </div>
                       
                
                         <div style="color:red">@errorMessage</div>
                
                
                    </div>
                
                </div>

                
                
                
                
                
                
                
                
                
                
            </div>
        </div>
    </div>
</div>


@layout EmptyLayout

@code {

    public User newUserAccount = new User();
    private Payment newPaymentAccount = new Payment();
    private string errorMessage;

    protected async override Task OnInitializedAsync()
    {
        errorMessage = "";
       
    }


    public bool validateUsername()
    {
        if (newUserAccount.username == null)
        {
            errorMessage = "username can not be empty";
            return false;
        }

        if (newUserAccount.username.Length< 4)
        {
            errorMessage = "Username must contain more than 3 characters";
            return false;
        }

        if (newUserAccount.username.Length > 14)
        {
            errorMessage = "Username must contain less than 15 characters";
            return false;
        }
        else
        {
            return true;
        }
    }


    public bool validatePassword()
    {
        if (newUserAccount.password == null)
        {
            errorMessage = "Password cannot be empty";
            return false;
        }
        if (newUserAccount.password.Length < 8)
        {
            errorMessage = "Password length must be 8 or more";
            return false;
        }

        if (newUserAccount.password.Length > 14)
        {
            errorMessage = "password lenght must be 14 or less";
            return false;
        }
        else
        {
            return true;
        }
    }


    public bool validatePayment()
    {
        if (newPaymentAccount.name == null )
        {
            errorMessage = "CardholderName cannot be empty";
            return false;
        }
        
        if (newPaymentAccount.name.Length < 4 )
        {
            errorMessage = "CardholderName cannot be less than 4";
            return false;
        }
        
        if (newPaymentAccount.name.Length > 12 )
        {
            errorMessage = "CardholderName cannot be more than 12";
            return false;
        }


        if (newPaymentAccount.cardnumber == null ) {
            errorMessage = "CardNumber cannot be empty";
            return false;
        }

        if (newPaymentAccount.cardnumber.Length < 16 ) {
            errorMessage = "CardNumber must contain 16 characters";
            return false;
        }


        if (newPaymentAccount.cardnumber.Length > 16  ) {
            errorMessage = "CardNumber must contain 16 characters";
            return false;
        }

        if (string.IsNullOrEmpty(newPaymentAccount.expirationdate)) {
            errorMessage = "ExpirationDate cannot be empty";
            return false;
        }


        if (newPaymentAccount.securitycode == null) {
            errorMessage = "CVV must contain more than 0 characters";
            return false;
        }


        if (newPaymentAccount.securitycode.Length > 3 || newPaymentAccount.securitycode.Length < 3 ){
            errorMessage = "CVV must contain  3 characters";
            return false;
        }

        else {

            return true;

        }

      
    }


    public bool validateSignUp()
    {

        if (validateUsername() && validatePassword() && validatePayment())
        {
            errorMessage = "successfully";
            return true;
        }
        else
        {
           
            return false;
        }
        
        
    }

    private async void AddUserAccount()
    {
        if (validateSignUp())
        {
               UserData.AddUser(newUserAccount);
        }
      
        
    }

   
    
    
    
    
    
    private async void AddnewPaymentAccount()
    {
        if (validateSignUp())
        {
            Payment payment = await PaymentData.AddPayment(new Payment(newPaymentAccount.name, newPaymentAccount.cardnumber, newPaymentAccount.expirationdate, newPaymentAccount.securitycode));
            NavigationManager.NavigateTo("/login");
        }
          
           
        
      
      
        
    }



}