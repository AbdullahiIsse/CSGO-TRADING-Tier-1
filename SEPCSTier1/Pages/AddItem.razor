@page "/AddItem"
@using SEPCSTier1.Models
@using SEPCSTier1.Data
@using System.Security.Cryptography
@inject IItemData IitemData
<AuthorizeView>
    <div class="w-100 d-flex justify-content-center">
        <div class="w-50 border border-light-1 p-3 m-5">
            <form>
                <!--
                <div class="form-group">
                    <label for="weaponType">Weapon Type</label>
                    <select class="selectpicker">
                        <option>Bayonet</option>
                        <option>Bowie Knife</option>
                        <option>Butterfly Knife</option>
                        <option>Classic Knife</option>
                        <option>Falchion Knife</option>
                        <option>Flip Knife</option>
                        <option>Gut Knife</option>
                        <option>Huntsman Knife</option>
                        <option>Karambit</option>
                        <option>M9 Bayonet</option>
                        <option>Navaja Knife</option>
                        <option>Nomad Knife</option>
                        <option>Paracord Knife</option>
                        <option>Shadow Daggers</option>
                        <option>Skeleton Knife</option>
                        <option>Stiletto Knife</option>
                        <option>Survival Knife</option>
                        <option>Talon Knife</option>
                        <option>Ursus Knife</option>
                        <option>CZ75-Auto</option>
                        <option>Desert Eagle</option>
                        <option>Dual Berettas</option>
                        <option>Five-SeveN</option>
                        <option>Glock-18</option>
                        <option>P2000</option>
                        <option>P250</option>
                        <option>R8 Revolver</option>
                        <option>Tec-9</option>
                        <option>USP-S</option>
                        <option>MAG-7</option>
                        <option>Nova</option>
                        <option>Sawed-Off</option>
                        <option>XM1014</option>
                        <option>M249</option>
                        <option>Negev</option>
                        <option>MAC-10</option>
                        <option>MP5-SD</option>
                        <option>MP7</option>
                        <option>MP9</option>
                        <option>P90</option>
                        <option>PP-Bizon</option>
                        <option>UMP-45</option>
                        <option>AK-47</option>
                        <option>AUG</option>
                        <option>FAMAS</option>
                        <option>Galil AR</option>
                        <option>M4A1-S</option>
                        <option>M4A4</option>
                        <option>SG 553</option>
                        <option>AWP</option>
                        <option>G3SG1</option>
                        <option>SCAR-20</option>
                        <option>SSG 08</option>
                    </select>

                </div>-->

                <div class="form-group">
                    <label for="weaponType">Weapon Type</label>
                    <br>

                    @if (ItemList != null)
                    {
                        <RadzenDropDown @bind-Value="pickedItem" Placeholder="Select Weapon" AllowClear="true" TValue="string" Style="width:300px"
                                        Data=@(ItemList.Select(c => c.weaponname).Distinct())
                                        Change=@(args => OnChange(args, "DropDown"))/>
                    }
                </div>  
            

                <!--Item Condition-->
                <div class="form-group">
                    <label for="weaponCondition">Weapon Condition</label>
                    <br>
                    <select class="selectpicker">
                        <option>Factory New</option>
                        <option>Minimal Wear</option>
                        <option>Field Tested</option>
                        <option>Well Worn</option>
                        <option>Battle Scared</option>
                    </select>
                </div>

                <!--Price-->
                <div class="form-group">
                    <label for="ItemPriceInput">Price</label>
                    <input @bind-value="intValue" type="number" class="form-control" id="ItemPriceInput" placeholder="Set Price">
                </div>

            
            
                <button type="button" class="btn btn-primary btn-lg " @onclick="Submit">Submit</button>
                <p class="text-danger" >@PickerErrorMessage</p>
                <p class="text-danger" >@PriceErrorMessage</p>
            </form>
        </div>
    </div>
</AuthorizeView>

@code {
    private int intValue;
    private string PickerErrorMessage = "";
    private string PriceErrorMessage = "";
    private string pickedItem;
    private IList<Itemss> ItemList;
    private IList<Itemss> Items;

    protected override async Task OnInitializedAsync()
    {
        Items = await IitemData.GetItems();
        ItemList = Items;
    }

    void OnChange(object value, string name)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>) value) : value;
    }

    void Submit()
    {
        Console.WriteLine(pickedItem);
        PickerErrorMessage = "";
        PriceErrorMessage = "";
        //Feedbacket fra selectoren giver en string tilbage, så vi sammenligner her navnet derfra, men listen af itemsene vi får fra Databasen
        try
        {
            Itemss item = findEqualItem(pickedItem);
            checkValidPrice();

            //READY TO PUSH FROM HERE
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            if (e.Message.Equals("Please select an Item to sell (Parameter 'itemName')"))
            {
                
                PickerErrorMessage = "Pick an Item to sell";
            } 
            if (e.Message.Equals("Please Pick a Price (Parameter 'intValue')"))
            {
                
                PriceErrorMessage = "Please Pick a Price";;
            }
            
        }
        
    }

    Itemss findEqualItem(string itemName)
    {
        foreach (var itm in ItemList)
        {
            if (itm.weaponname.Equals(itemName))
            {
                return itm;
            }
        }
        throw new ArgumentNullException(paramName: nameof(itemName), message: "Please select an Item to sell");
    }

    void checkValidPrice()
    {
        if (intValue.Equals(0))
        {
            throw new ArgumentNullException(paramName: nameof(intValue), message: "Please Pick a Price");
        }
    }

    
}