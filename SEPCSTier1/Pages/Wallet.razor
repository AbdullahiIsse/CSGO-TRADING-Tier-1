@page "/Wallet"
@using SEPCSTier1.Data
@using SEPCSTier1.Models
@attribute [Authorize]
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject IPaymentData PaymentData
@inject NavigationManager NavigationManager
@inject ProtectedSessionStorage ProtectedSessionStore
@inject IWalletData WalletData


@if (payment != null)
{
    <table class="table">
        <thead>
        <tr>
            <th>Name</th>
            <th>CardNumber</th>
            <th>ExpirationDate</th>
            <th>SecurityCode</th>
        </tr>
        </thead>

        <tbody class="text-gray-700">


        <tr>
            <td class="w-1/3 text-left py-3 px-4">@payment.name</td>
            <td class="w-1/3 text-left py-3 px-4">@payment.cardnumber</td>
            <td class="w-1/3 text-left py-3 px-4">@payment.expirationdate</td>
            <td class="w-1/3 text-left py-3 px-4">@payment.securitycode</td>
            <td>
                @* <button @onclick="@(() => RemoveUserAccount(item.id))"> *@
                @*     <i class="oi oi-trash" style="color:red"/> *@
                @* </button> *@
            </td>

            <td>

                <button @onclick="@(() => EditPayment(payment.id))">
                    <i class="oi oi-pencil" style="color:#1b6ec2"/>
                </button>

            </td>

        </tr>

        </tbody>
    </table>


    <div class="col">

        <div class="card" style="width: 18rem;">
            <img class="card-img-top" src="credit.png" alt="Card image cap">
            <div class="card-body">
                <h5 class="card-title">Wallet</h5>
                <p class="card-text">@totalPrice â‚¬</p>
                <input type="number" class="form-control" @bind-value="_wallet.balance" placeholder="Enter price">
                <a class="btn btn-primary" @onclick="@(() => UpdateWallet())">Insert Money</a>
            </div>
        </div>
   <div style="color:red">@errorMessage</div>
    </div>
}





@code {

    public long id { get; set; }
    private Payment payment;
    public long totalPrice { get; set; }
    public long PaymentId { get; set; }
    private string errorMessage;

    public Models.Wallet _wallet = new Models.Wallet();


    protected async override Task OnInitializedAsync()
    {
        try
        {
            var protectedBrowserStorageResultId = await ProtectedSessionStore.GetAsync<long>("id");
            id = protectedBrowserStorageResultId.Value;
            errorMessage = "";
            payment = await PaymentData.GetPaymentByUserId(id);
            totalPrice = await WalletData.SumOfBalance(id);
            await ProtectedSessionStore.SetAsync("wi", totalPrice);
            Console.WriteLine("price " + totalPrice);
            var result = await ProtectedSessionStore.GetAsync<long>("P");
            PaymentId = result.Value;

            Console.WriteLine("payment id:" + payment.id);
        }
        catch (Exception e)
        {
            totalPrice = 0;
            throw new Exception("test");
        }
    }

    public bool validatewallet()
    {
        if (_wallet.balance == 0)
        {
            errorMessage = "value must be more than 0";
            return false;
        }
        else
        {
            return true;
        }
    }


    public async void UpdateWallet()
    {
        if (validatewallet())
        {
             await WalletData.UpdateWallets(new Models.Wallet((int) (_wallet.balance + totalPrice), id));
            NavigationManager.NavigateTo(NavigationManager.Uri, true);
        }
       
    }


    private void EditPayment(long Id)
    {
        NavigationManager.NavigateTo($"EditPayment/{Id}");
    }

}