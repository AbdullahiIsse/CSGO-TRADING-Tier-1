@page "/AddItem"
@using SEPCSTier1.Models
@using SEPCSTier1.Data
@inject IOfferData OfferData
@using System.Security.Cryptography
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject IItemData IitemData
@inject NavigationManager NavigationManager
@inject ProtectedSessionStorage ProtectedSessionStore


        <div class="container rounded bg-white mt-5 mb-5">
            <div class="row">
                <div class="col-md-3 border-right">
                    <div class="d-flex flex-column align-items-center text-center p-3 py-5">
                        <img class="rounded-circle mt-5" width="150px" src="https://st3.depositphotos.com/15648834/17930/v/600/depositphotos_179308454-stock-illustration-unknown-person-silhouette-glasses-profile.jpg"><span class="font-weight-bold">Welcome</span><span class="text-black-50">To CSGO Trading</span><span> </span>
                    </div>
                </div>
                <div class="col-md-5 border-right">
                    <div class="p-3 py-5">
                        
                        <EditForm Model="@AddNewSaleOffer" OnValidSubmit="@AddSaleOffers">
                            <DataAnnotationsValidator/> <ValidationSummary/>
                            <div class="row mt-2">
                                <h3>Create New Sale Offer</h3>
                                <br>
                                <div class="col-md-12">
                                    @if (ItemList != null)
                                    {
                                        <RadzenDropDown @bind-Value="pickedItem" Placeholder="Select Weapon" AllowClear="true" TValue="string" Style="width:100%"
                                                        Data=@(ItemList.Select(c => c.weaponname).Distinct())
                                                        Change=@(args => OnChange(args, "DropDown"))/>
                                    }
                                </div>
                                <div class="col-md-12">
                                    <label class="labels">Price</label>
                                    <input type="number" class="form-control" placeholder="Password" @bind-value="AddNewSaleOffer.sale_price">
                                </div>



                            </div>

                            <div class="row mt-3">
                            </div>
                            <p class="actions">
                                <button class="btn btn-outline-dark" type="submit">Create</button>
                            </p>
                        </EditForm>


                    </div>
                </div>
            </div>
        </div>
    







@code {

    private int intValue;
    private string PickerErrorMessage = "";
    private string PriceErrorMessage = "";
    private string pickedItem;
    private IList<Itemss> ItemList;
    private IList<Itemss> Items;
    public SaleOffer AddNewSaleOffer = new SaleOffer();
    public long id { get; set; }


    protected override async Task OnInitializedAsync()
    {
        var protectedBrowserStorageResultId = await ProtectedSessionStore.GetAsync<long>("id");
        id = protectedBrowserStorageResultId.Value;
        
        Items = await IitemData.GetItems();
        ItemList = Items;
    }

    void OnChange(object value, string name)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>) value) : value;
    }

   


    Itemss findEqualItem(string itemName)
    {
        foreach (var itm in ItemList)
        {
            if (itm.weaponname.Equals(itemName))
            {
                return itm;
            }
        }
        throw new ArgumentNullException(paramName: nameof(itemName), message: "Please select an Item to sell");
    }


    private void AddSaleOffers()
    {
        PickerErrorMessage = "";
        PriceErrorMessage = "";
    //Feedbacket fra selectoren giver en string tilbage, så vi sammenligner her navnet derfra, men listen af itemsene vi får fra Databasen
        try
        {
            Itemss item = findEqualItem(pickedItem);
            Console.WriteLine(item.id);


    //sale id er altid nul, ved sku ikke hvorfor, tror det derfor den ikke blive uploaded til database
            OfferData.AddSaleOffer(new SaleOffer
            {
                item_id = item.id,
                sale_price = AddNewSaleOffer.sale_price,
                wallet_id = id
            });

            NavigationManager.NavigateTo("/Shop",true);
            NavigationManager.NavigateTo("/",true);
            Console.WriteLine("hej");
            Console.WriteLine("Det her er sale id --->" + AddNewSaleOffer.id + "Det her er item id --->" + AddNewSaleOffer.item_id + "Det her er saleprice --->" + AddNewSaleOffer.sale_price + "Det her er wallet id --->" + AddNewSaleOffer.wallet_id + "Det her er userid --->" +
                              id);

    //READY TO PUSH FROM HERE
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            if (e.Message.Equals("Please select an Item to sell (Parameter 'itemName')"))
            {
                PickerErrorMessage = "Pick an Item to sell";
            }
        }
    }


}