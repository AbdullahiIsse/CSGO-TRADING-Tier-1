@page "/Cart"
@using SEPCSTier1.Models
@using SEPCSTier1.Data
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject IShoppingCartData ShoppingCartData
@inject IToastService toastService
@inject IOrderData orderData
@inject IWalletData walletData
@inject NavigationManager NavigationManager
@inject ProtectedSessionStorage ProtectedSessionStore

<div class="container-md">
    <div class="row">
        <div class="col">

            <h1 class="m-5 ms-5">Shopping Cart</h1>

            <div class="d-flex justify-content-center">
                <table class="table w-75">
                    <thead>
                    <tr>
                        <th>SaleOfferId</th>
                        <th>ItemID</th>
                        <th>SkinName</th>
                        <th>Price</th>
                    </tr>
                    </thead>


                    <tbody class="text-gray-700">

                    @foreach (var shoppingCart in shoppingCarts)
                    {
                        <tr>
                            <td class="w-1/3 text-left py-3 px-4">@shoppingCart.sale_offer_id</td>
                            <td class="w-1/3 text-left py-3 px-4">@shoppingCart.item_id</td>
                            <td class="w-1/3 text-left py-3 px-4">@shoppingCart.weaponname</td>
                            <td class="w-1/3 text-left py-3 px-4">@shoppingCart.sale_price</td>


                        </tr>
                    }

                    <thead>
                    <tr>
                        <th>Total Price</th>
                        <th></th>
                        <th>@totalPrice €</th>
                    </tr>
                    </thead>

                    </tbody>
                </table>
            </div>

            <div class="d-flex justify-content-end mt-5">
            <button type="button" class="w-25 btn mr-5 btn-lg btn-success" @onclick="buyCart">Complete order</button>
            </div>

        </div>
    </div>
</div>


@code {

    private IList<ShowShoppingCart> shoppingCarts = new List<ShowShoppingCart>();
    public long id { get; set; }
    public long totalPrice { get; set; }
    public long walletBalance { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var protectedBrowserStorageResultId = await ProtectedSessionStore.GetAsync<long>("id");
        id = protectedBrowserStorageResultId.Value;
        if (id != 0)
        {
            shoppingCarts = await ShoppingCartData.GetShoppingCartById(id);
            totalPrice = await ShoppingCartData.GetTotalPrice(id);
            walletBalance = await walletData.SumOfBalance(id);
        }
    }

    public async void buyCart()
    {
        if (walletBalance >= totalPrice)
        {
            Order o = new Order
            {
                wallet_buyer_id = 3,
                sale_id = 4
            };
            toastService.ShowSuccess("test");

            //Update wallet lokalt
            walletBalance = walletBalance - totalPrice;
            //Update wallet db
            await walletData.UpdateWallets(new Models.Wallet((int) (walletBalance),id));
            
            //Slet saleoffer
            //Slet Shopping cart
            
            //send ordre
            orderData.AddOrder(o);
            
            NavigationManager.NavigateTo(NavigationManager.Uri, true);

        }
        else
        {
            toastService.ShowError("Du har ikke nok penge på din wallet");
        }
    }


}