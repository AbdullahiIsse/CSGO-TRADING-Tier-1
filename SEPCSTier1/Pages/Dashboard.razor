@page "/dashboard"
@using SEPCSTier1.Models
@using SEPCSTier1.Data
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject IItemData IitemData
@inject IOrderData orderData 
@inject ISoldOfferData soldOfferData 

@inject IUserData userData

@inject NavigationManager NavigationManager
@inject ProtectedSessionStorage ProtectedSessionStore


<!-- USER PROFILE PART (LEFT) -->
<div>
    <h1>Your profile</h1>
</div>

<div class="d-flex">
    <div class="col-5 my-6" style="margin: 20px 50px 0 50px">
        <div class="">
            <RadzenCard class="m-1">
                <h3 class="h5">Contact</h3>
                <div class="d-flex flex-row">
                    <RadzenImage Path="AK47.webp" Class="rounded-circle float-left mr-3" Style="width: 100px; height: 100px;"/>
                    <div>
                        <div>Employee</div>
                        <b>@id</b>
                        <div class="mt-3">Company</div>
                        <b>+3 reps</b>
                    </div>
                </div>
            </RadzenCard>
            <RadzenCard class="m-3">
                <h3 class="h5">Your shop information</h3>
                <div class="row">
                    <div class="col-md-4">
                        <div>Completeted trades</div>
                        <b>5</b>
                        <div class="mt-3">Rejected trades</div>
                        <b>0</b>
                    </div>
                    <div class="col-md-8">
                        <div>Views</div>
                        <b>?</b>
                        <div class="mt-3">?</div>
                        <b>?</b>
                    </div>
                </div>
            </RadzenCard>
        </div>
    </div>

    <div>
        <div>
            <h1>My sold products</h1>
            <table class="table">
                <tbody>
                <RadzenDataList WrapItems="true" AllowPaging="true" Data="@mySoldProducts" TItem="Product">
                    <Template Context="items">
                        <RadzenCard Style="width:300px; margin-bottom: 20px; height:400px;">
                            <div class="row" @onclick="@(() => productGoTo(items.item_id, items.saleOffer_id))">
                                <div class="col-md-12">
                                    <div class="d-flex justify-content-between">
                                        <p>Skin Name</p>
                                        <p>Skin Price</p>
                                    </div>
                                    <div class="d-flex justify-content-between">
                                        <p>
                                            <b>@items.weaponname</b>
                                        </p>
                                        <p>
                                            <b>@items.sale_price</b>
                                        </p>
                                    </div>

                                    <img src="@items.weaponURL" width="300px"/>

                                </div>
                            </div>
                        </RadzenCard>
                    </Template>
                </RadzenDataList>
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- ORDERS & SALES PART RIGHT -->

@code {

    private IList<SoldOffer> mysoldOffers; // SALE PART - PRIS OSV
    private IList<Itemss> mysoldOffersItems; // ITEM PART - BILLEDE OSV
    private IList<Product> mySoldProducts; //FINAL - ^SAMLET
    
    private long id;
    private User user;

    protected override async Task OnInitializedAsync()
    {
        user = new User();
        
        
        
        var protectedBrowserStorageResultId = await ProtectedSessionStore.GetAsync<long>("id");
        id = protectedBrowserStorageResultId.Value;
        
        
        mySoldProducts = new List<Product>();
        if (id != 0)
        {
            mysoldOffers = await soldOfferData.getSoldOfferBySellerWalletId(id);
            user = await userData.GetUserByID(id);
            Console.WriteLine(mysoldOffers.Count());
            
    //DEL DER CRASHER LORETET.. Tror der mangler awaits
            foreach (var VARIABLE in mysoldOffers)
            {
                var itemById = await IitemData.GetItemByID(VARIABLE.item_id);
                Product i = new Product()
                {
                    sale_price = VARIABLE.sale_price,
                    weaponname = itemById.weaponname,
                    weaponURL = itemById.weaponURL
                };
                
                mySoldProducts.Add(i);
            }
        }
        
        
        /*foreach (var VARIABLE in saleOffers)
        {
            activeSales.Add(new Product()
            {
                saleOffer_id = VARIABLE.id,
                item_id = ItemList.FirstOrDefault(o => o.id.Equals(VARIABLE.item_id)).id,
                sale_price = VARIABLE.sale_price,
                wallet_id = userWallet.id,
                weaponname = ItemList.FirstOrDefault(o => o.id.Equals(VARIABLE.item_id)).weaponname,
                weaponURL = ItemList.FirstOrDefault(o => o.id.Equals(VARIABLE.item_id)).weaponURL
            });
        }*/
    }

    private void productGoTo(long item_id, long offer_id)
    {
        NavigationManager.NavigateTo($"Product/{offer_id}/{item_id}");
    }

}