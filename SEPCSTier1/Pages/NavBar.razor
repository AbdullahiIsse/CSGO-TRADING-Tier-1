@page "/NavBar"
@using SEPCSTier1.Data
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject ProtectedSessionStorage ProtectedSessionStore
@inject IShoppingCartData ShoppingCartData
@inject IWalletData WalletData

@*
<RadzenCard Style="height: 100px">
    <RadzenMenu>
        <RadzenMenuItem Text="Home" Icon="home" Path="AdultList">
        </RadzenMenuItem>


        <RadzenMenuItem Text="Shop" Icon="accessibility" Path="Shop">
        </RadzenMenuItem>

        <RadzenMenuItem Text="Sell item" Icon="accessibility" Path="AddItem">
        </RadzenMenuItem>


        <RadzenMenuItem Text="Chat" Icon="assessment" Path="Chat">
        </RadzenMenuItem>

        <RadzenMenuItem Text="Admin" Icon="accessibility" Path="Admin">
        </RadzenMenuItem>

        <RadzenMenuItem Text="Wallet" Icon="accessibility" Path="Wallet">
        </RadzenMenuItem>

        <AuthorizeView>
            <NotAuthorized>
                <RadzenMenuItem Text="Login" Icon="lock" Path="Login">
                </RadzenMenuItem>
            </NotAuthorized>
            <Authorized>
                <RadzenMenuItem Text="Sign Out" Icon="lock_open">
                    <a @onclick="PerformLogout"> Log out </a>

                </RadzenMenuItem>
            </Authorized>
        </AuthorizeView>
    </RadzenMenu>
</RadzenCard>
*@


<nav class="navbar navbar-expand-lg navbar navbar-dark bg-dark">
    <a class="navbar-brand" href="Shop">CSGO Trading</a>
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
    </button>

   
    <div class="collapse navbar-collapse" id="navbarSupportedContent">
       
        <ul class="navbar-nav mr-auto">
            <li class="nav-item ">
                <a class="nav-link" href="Shop">Home <span class="sr-only">(current)</span></a>
            </li>
                        @if (id != 0)
                        {
            <li class="nav-item">
                <a class="nav-link" href="AddItem">AddItem</a>
            </li>
                        }

                            @*<li class="nav-item">
                <a class="nav-link" href="Chat">Chat</a>
            </li>*@
           
               
                   <AuthorizeView>
                <NotAuthorized>
                    <li class="nav-item">
                        <a class="nav-link " href="Login">Login</a>
                    </li>
                </NotAuthorized>
               </AuthorizeView> 
            

                    <AuthorizeView Policy="SecurityLevel4">

                        <li class="nav-item">
                            <a class="nav-link" href="Admin">Admin</a>
                        </li>
                    </AuthorizeView> 
            
            @if (id != 0)
            {
                <li class="nav-item">
                    <a class="nav-link" href="Dashboard">Dashboard</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="Wallet">Wallet</a>
                </li>
            }


            <AuthorizeView>
            <Authorized>
                    <li class="nav-item">
                        <a class="nav-link " @onclick="PerformLogout"> Logout @name</a>
                    </li>
  </Authorized>
                     </AuthorizeView> 
        </ul>
        
      
       
        
        <label style="color: white; margin-right: 40px">Wallet: @WalletId â‚¬ </label>
        
       
        <div @onclick="@(() => NavigateToCart())">
            
            <i class="fa" style="color:white;font-size:35px"  >&#xf07a;</i>
            <span class='badge badge-warning' id='lblCartCount'> @count </span>
        </div>
        
        
        
    </div>
</nav>


@code {

    public string name { get; set; }

    public long id { get; set; }

    public long count { get; set; }

    public long WalletId { get; set; }

    

    protected async override Task OnInitializedAsync()
    {
      
        var protectedBrowserStorageResult = await ProtectedSessionStore.GetAsync<string>("username");
        var protectedBrowserStorageResultId = await ProtectedSessionStore.GetAsync<long>("id");
        id = protectedBrowserStorageResultId.Value;
        var cartCountById = await ShoppingCartData.GetCartCountById(id);
        name = protectedBrowserStorageResult.Value;
        count = cartCountById;
        if (name == null)
        {
            WalletId = 0;
        }
        else if (id != 0)
        {
              WalletId = await WalletData.SumOfBalance(id);
        }
      
        
    }


    public async Task PerformLogout()
    {
        try
        {
            ((CustomAuthenticationStateProvider) AuthenticationStateProvider).Logout();
            await ProtectedSessionStore.DeleteAsync("id");
            NavigationManager.NavigateTo("/shop", true);
        }
        catch (Exception e)
        {
        }
    }


    public async Task NavigateToCart()
    {
        NavigationManager.NavigateTo("/Cart",true);
        
    }

}