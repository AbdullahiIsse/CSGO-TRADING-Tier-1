@page "/Product/{offer_id:long}/{item_id:long}"
@using SEPCSTier1.Models
@using SEPCSTier1.Data
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.Threading

@inject IItemData ItemData
@inject IOfferData IofferData
@inject ICart cart
@inject IShoppingCartData ShoppingCartData
@inject ProtectedSessionStorage ProtectedSessionStore
@inject NavigationManager NavigationManager
@inject IToastService toastService

@if (product == null)
{
    <em>Product not found!</em>
}
else
{
    <div class="d-flex">
        <div>
            <!-- IMG LEFT -->
            <img src="@product.weaponURL">
        </div>

        <div class="bg-light rounded-lg pl-5 pt-4 w-50">
            <!-- TEXT RIGHT -->
            <h1 class="fw-bold">@product.weaponname</h1>
            <h3 class="fw-bolder">@product.sale_price</h3>

            <div class="d-flex">
                <p>Icon</p>
                <p class="fw-normal">Username</p>
            </div>

            <p class="fw-normal">Description</p>

            <div>
                <button type="button" @onclick="@(() => { toastService.ShowInfo("dsds");  addToCart();})" class="btn btn-primary">Læg i kurv</button>
                <button type="button" class="btn btn-dark">Forslå pris</button>
            </div>
        </div>
    </div>
    
    <div class="row my-5">
        <div class="col-lg-6 col-xl-4 offset-lg-3 offset-xl-4">
            <RadzenCard class="m-3">
                <h3 class="h5">Contact</h3>
                <div class="d-flex flex-row">
                    <RadzenImage Path="@product.weaponURL" Class="rounded-circle float-left mr-3" Style="width: 100px; height: 100px;" />
                    <div>
                        <div>Seller</div>
                        <b>Bente bendt</b>
                        <div class="mt-3">Reps</div>
                        <b>2 plus reps</b>
                    </div>
                </div>
            </RadzenCard>
        </div>
    </div>
    
    
    
}


@code {


    [Parameter]
    public long item_id { get; set; }
    [Parameter]
    public long offer_id { get; set; }
    
    public long id { get; set; }

    private Itemss item;
    private SaleOffer offer;
    private Product product;

    protected override async Task OnInitializedAsync()
    {
        item = await ItemData.GetItemByID(item_id);
        offer = await IofferData.GetOfferById(offer_id);

        if (offer != null && item != null)
        {
            product = new Product()
            {
                sale_price = offer.sale_price,
                wallet_id = offer.wallet_id,
                saleOffer_id = offer.id,
                item_id = offer.item_id,
                weaponname = item.weaponname,
                weaponURL = item.weaponURL
            };
        }
        var protectedBrowserStorageResultId = await ProtectedSessionStore.GetAsync<long>("id");
        id = protectedBrowserStorageResultId.Value;
        
    }

    public void showNoti()
    {
        
    }

    public async void addToCart()
    {

        var ShoppingCart = new ShoppingCarts()
        {
            saleOfferId = offer_id,
            userId = id
        };

        
        
        ShoppingCartData.AddShoppingCart(ShoppingCart);
        
      
        
        NavigationManager.NavigateTo("/Cart",true);
        
        
    }

}