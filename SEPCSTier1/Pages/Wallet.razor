@page "/Wallet"
@using SEPCSTier1.Data
@using SEPCSTier1.Models
@attribute [Authorize]
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject IPaymentData PaymentData
@inject NavigationManager NavigationManager
@inject ProtectedSessionStorage ProtectedSessionStore
@inject IWalletData WalletData


@if (payment != null)
{
    
    <table class="table">
        <thead>
        <tr>
            <th>Name</th>
            <th>CardNumber</th>
            <th>ExpirationDate</th>
            <th>SecurityCode</th>
        </tr>
        </thead>

        <tbody class="text-gray-700">


        <tr>
            <td class="w-1/3 text-left py-3 px-4">@payment.name</td>
            <td class="w-1/3 text-left py-3 px-4">@payment.cardnumber</td>
            <td class="w-1/3 text-left py-3 px-4">@payment.expirationdate</td>
            <td class="w-1/3 text-left py-3 px-4">@payment.securitycode</td>
            <td>
                @* <button @onclick="@(() => RemoveUserAccount(item.id))"> *@
                @*     <i class="oi oi-trash" style="color:red"/> *@
                @* </button> *@
            </td>

        </tr>

        </tbody>
    </table>

    <div class="col">

        <div class="card" style="width: 18rem;">
            <img class="card-img-top" src="credit.png" alt="Card image cap">
            <div class="card-body">
                <h5 class="card-title">Wallet</h5>
                <p class="card-text">@totalPrice â‚¬</p>
                <input type="email" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp" placeholder="Enter price">
                <a href="#" class="btn btn-primary">Insert Money</a>
            </div>
        </div>

    </div>
}





@code {

    public long id { get; set; }
    private Payment payment;
    public long totalPrice { get; set; }


    protected async override Task OnInitializedAsync()
    {
        
            var protectedBrowserStorageResultId = await ProtectedSessionStore.GetAsync<long>("id");
            id = protectedBrowserStorageResultId.Value;
        try
        {
            payment = await PaymentData.GetPaymentByUserId(id);
            totalPrice = await WalletData.SumOfPrice(id);


        }
        catch (Exception e)
        {
            
            throw new Exception("test");
        }
      
           
        
       
    }

   

}